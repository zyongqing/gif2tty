from .utils import cache

# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters
# section: CSI sequences
CUU_CODE = "\033[%dA"
CUD_CODE = "\033[%dB"

# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters
# section: SGR
SGR_8BIT_FG_COLOR_CODE = "\033[38;5;%dm"
SGR_8BIT_BG_COLOR_CODE = "\033[48;5;%dm"

SGR_8BIT_FG_COLOR_BLACK = "\033[38;5;%dm" % 0
SGR_8BIT_FG_COLOR_WHITE = "\033[38;5;%dm" % 15

SGR_8BIT_BG_COLOR_BLACK = "\033[48;5;%dm" % 0
SGR_8BIT_BG_COLOR_WHITE = "\033[48;5;%dm" % 15

STANDARD_8BIT_RGB_HEX = [
    (0x00, 0x00, 0x00),
    (0x80, 0x00, 0x00),
    (0x00, 0x80, 0x00),
    (0x80, 0x80, 0x00),
    (0x00, 0x00, 0x80),
    (0x80, 0x00, 0x80),
    (0x00, 0x80, 0x80),
    (0xC0, 0xC0, 0xC0),
    (0x80, 0x80, 0x80),
    (0xFF, 0x00, 0x00),
    (0x00, 0xFF, 0x00),
    (0xFF, 0xFF, 0x00),
    (0x00, 0x00, 0xFF),
    (0xFF, 0x00, 0xFF),
    (0x00, 0xFF, 0xFF),
    (0xFF, 0xFF, 0xFF),
    (0x00, 0x00, 0x00),
    (0x00, 0x00, 0x5F),
    (0x00, 0x00, 0x87),
    (0x00, 0x00, 0xAF),
    (0x00, 0x00, 0xD7),
    (0x00, 0x00, 0xFF),
    (0x00, 0x5F, 0x00),
    (0x00, 0x5F, 0x5F),
    (0x00, 0x5F, 0x87),
    (0x00, 0x5F, 0xAF),
    (0x00, 0x5F, 0xD7),
    (0x00, 0x5F, 0xFF),
    (0x00, 0x87, 0x00),
    (0x00, 0x87, 0x5F),
    (0x00, 0x87, 0x87),
    (0x00, 0x87, 0xAF),
    (0x00, 0x87, 0xD7),
    (0x00, 0x87, 0xFF),
    (0x00, 0xAF, 0x00),
    (0x00, 0xAF, 0x5F),
    (0x00, 0xAF, 0x87),
    (0x00, 0xAF, 0xAF),
    (0x00, 0xAF, 0xD7),
    (0x00, 0xAF, 0xFF),
    (0x00, 0xD7, 0x00),
    (0x00, 0xD7, 0x5F),
    (0x00, 0xD7, 0x87),
    (0x00, 0xD7, 0xAF),
    (0x00, 0xD7, 0xD7),
    (0x00, 0xD7, 0xFF),
    (0x00, 0xFF, 0x00),
    (0x00, 0xFF, 0x5F),
    (0x00, 0xFF, 0x87),
    (0x00, 0xFF, 0xAF),
    (0x00, 0xFF, 0xD7),
    (0x00, 0xFF, 0xFF),
    (0x5F, 0x00, 0x00),
    (0x5F, 0x00, 0x5F),
    (0x5F, 0x00, 0x87),
    (0x5F, 0x00, 0xAF),
    (0x5F, 0x00, 0xD7),
    (0x5F, 0x00, 0xFF),
    (0x5F, 0x5F, 0x00),
    (0x5F, 0x5F, 0x5F),
    (0x5F, 0x5F, 0x87),
    (0x5F, 0x5F, 0xAF),
    (0x5F, 0x5F, 0xD7),
    (0x5F, 0x5F, 0xFF),
    (0x5F, 0x87, 0x00),
    (0x5F, 0x87, 0x5F),
    (0x5F, 0x87, 0x87),
    (0x5F, 0x87, 0xAF),
    (0x5F, 0x87, 0xD7),
    (0x5F, 0x87, 0xFF),
    (0x5F, 0xAF, 0x00),
    (0x5F, 0xAF, 0x5F),
    (0x5F, 0xAF, 0x87),
    (0x5F, 0xAF, 0xAF),
    (0x5F, 0xAF, 0xD7),
    (0x5F, 0xAF, 0xFF),
    (0x5F, 0xD7, 0x00),
    (0x5F, 0xD7, 0x5F),
    (0x5F, 0xD7, 0x87),
    (0x5F, 0xD7, 0xAF),
    (0x5F, 0xD7, 0xD7),
    (0x5F, 0xD7, 0xFF),
    (0x5F, 0xFF, 0x00),
    (0x5F, 0xFF, 0x5F),
    (0x5F, 0xFF, 0x87),
    (0x5F, 0xFF, 0xAF),
    (0x5F, 0xFF, 0xD7),
    (0x5F, 0xFF, 0xFF),
    (0x87, 0x00, 0x00),
    (0x87, 0x00, 0x5F),
    (0x87, 0x00, 0x87),
    (0x87, 0x00, 0xAF),
    (0x87, 0x00, 0xD7),
    (0x87, 0x00, 0xFF),
    (0x87, 0x5F, 0x00),
    (0x87, 0x5F, 0x5F),
    (0x87, 0x5F, 0x87),
    (0x87, 0x5F, 0xAF),
    (0x87, 0x5F, 0xD7),
    (0x87, 0x5F, 0xFF),
    (0x87, 0x87, 0x00),
    (0x87, 0x87, 0x5F),
    (0x87, 0x87, 0x87),
    (0x87, 0x87, 0xAF),
    (0x87, 0x87, 0xD7),
    (0x87, 0x87, 0xFF),
    (0x87, 0xAF, 0x00),
    (0x87, 0xAF, 0x5F),
    (0x87, 0xAF, 0x87),
    (0x87, 0xAF, 0xAF),
    (0x87, 0xAF, 0xD7),
    (0x87, 0xAF, 0xFF),
    (0x87, 0xD7, 0x00),
    (0x87, 0xD7, 0x5F),
    (0x87, 0xD7, 0x87),
    (0x87, 0xD7, 0xAF),
    (0x87, 0xD7, 0xD7),
    (0x87, 0xD7, 0xFF),
    (0x87, 0xFF, 0x00),
    (0x87, 0xFF, 0x5F),
    (0x87, 0xFF, 0x87),
    (0x87, 0xFF, 0xAF),
    (0x87, 0xFF, 0xD7),
    (0x87, 0xFF, 0xFF),
    (0xAF, 0x00, 0x00),
    (0xAF, 0x00, 0x5F),
    (0xAF, 0x00, 0x87),
    (0xAF, 0x00, 0xAF),
    (0xAF, 0x00, 0xD7),
    (0xAF, 0x00, 0xFF),
    (0xAF, 0x5F, 0x00),
    (0xAF, 0x5F, 0x5F),
    (0xAF, 0x5F, 0x87),
    (0xAF, 0x5F, 0xAF),
    (0xAF, 0x5F, 0xD7),
    (0xAF, 0x5F, 0xFF),
    (0xAF, 0x87, 0x00),
    (0xAF, 0x87, 0x5F),
    (0xAF, 0x87, 0x87),
    (0xAF, 0x87, 0xAF),
    (0xAF, 0x87, 0xD7),
    (0xAF, 0x87, 0xFF),
    (0xAF, 0xAF, 0x00),
    (0xAF, 0xAF, 0x5F),
    (0xAF, 0xAF, 0x87),
    (0xAF, 0xAF, 0xAF),
    (0xAF, 0xAF, 0xD7),
    (0xAF, 0xAF, 0xFF),
    (0xAF, 0xD7, 0x00),
    (0xAF, 0xD7, 0x5F),
    (0xAF, 0xD7, 0x87),
    (0xAF, 0xD7, 0xAF),
    (0xAF, 0xD7, 0xD7),
    (0xAF, 0xD7, 0xFF),
    (0xAF, 0xFF, 0x00),
    (0xAF, 0xFF, 0x5F),
    (0xAF, 0xFF, 0x87),
    (0xAF, 0xFF, 0xAF),
    (0xAF, 0xFF, 0xD7),
    (0xAF, 0xFF, 0xFF),
    (0xD7, 0x00, 0x00),
    (0xD7, 0x00, 0x5F),
    (0xD7, 0x00, 0x87),
    (0xD7, 0x00, 0xAF),
    (0xD7, 0x00, 0xD7),
    (0xD7, 0x00, 0xFF),
    (0xD7, 0x5F, 0x00),
    (0xD7, 0x5F, 0x5F),
    (0xD7, 0x5F, 0x87),
    (0xD7, 0x5F, 0xAF),
    (0xD7, 0x5F, 0xD7),
    (0xD7, 0x5F, 0xFF),
    (0xD7, 0x87, 0x00),
    (0xD7, 0x87, 0x5F),
    (0xD7, 0x87, 0x87),
    (0xD7, 0x87, 0xAF),
    (0xD7, 0x87, 0xD7),
    (0xD7, 0x87, 0xFF),
    (0xD7, 0xAF, 0x00),
    (0xD7, 0xAF, 0x5F),
    (0xD7, 0xAF, 0x87),
    (0xD7, 0xAF, 0xAF),
    (0xD7, 0xAF, 0xD7),
    (0xD7, 0xAF, 0xFF),
    (0xD7, 0xD7, 0x00),
    (0xD7, 0xD7, 0x5F),
    (0xD7, 0xD7, 0x87),
    (0xD7, 0xD7, 0xAF),
    (0xD7, 0xD7, 0xD7),
    (0xD7, 0xD7, 0xFF),
    (0xD7, 0xFF, 0x00),
    (0xD7, 0xFF, 0x5F),
    (0xD7, 0xFF, 0x87),
    (0xD7, 0xFF, 0xAF),
    (0xD7, 0xFF, 0xD7),
    (0xD7, 0xFF, 0xFF),
    (0xFF, 0x00, 0x00),
    (0xFF, 0x00, 0x5F),
    (0xFF, 0x00, 0x87),
    (0xFF, 0x00, 0xAF),
    (0xFF, 0x00, 0xD7),
    (0xFF, 0x00, 0xFF),
    (0xFF, 0x5F, 0x00),
    (0xFF, 0x5F, 0x5F),
    (0xFF, 0x5F, 0x87),
    (0xFF, 0x5F, 0xAF),
    (0xFF, 0x5F, 0xD7),
    (0xFF, 0x5F, 0xFF),
    (0xFF, 0x87, 0x00),
    (0xFF, 0x87, 0x5F),
    (0xFF, 0x87, 0x87),
    (0xFF, 0x87, 0xAF),
    (0xFF, 0x87, 0xD7),
    (0xFF, 0x87, 0xFF),
    (0xFF, 0xAF, 0x00),
    (0xFF, 0xAF, 0x5F),
    (0xFF, 0xAF, 0x87),
    (0xFF, 0xAF, 0xAF),
    (0xFF, 0xAF, 0xD7),
    (0xFF, 0xAF, 0xFF),
    (0xFF, 0xD7, 0x00),
    (0xFF, 0xD7, 0x5F),
    (0xFF, 0xD7, 0x87),
    (0xFF, 0xD7, 0xAF),
    (0xFF, 0xD7, 0xD7),
    (0xFF, 0xD7, 0xFF),
    (0xFF, 0xFF, 0x00),
    (0xFF, 0xFF, 0x5F),
    (0xFF, 0xFF, 0x87),
    (0xFF, 0xFF, 0xAF),
    (0xFF, 0xFF, 0xD7),
    (0xFF, 0xFF, 0xFF),
    (0x08, 0x08, 0x08),
    (0x12, 0x12, 0x12),
    (0x1C, 0x1C, 0x1C),
    (0x26, 0x26, 0x26),
    (0x30, 0x30, 0x30),
    (0x3A, 0x3A, 0x3A),
    (0x44, 0x44, 0x44),
    (0x4E, 0x4E, 0x4E),
    (0x58, 0x58, 0x58),
    (0x62, 0x62, 0x62),
    (0x6C, 0x6C, 0x6C),
    (0x76, 0x76, 0x76),
    (0x80, 0x80, 0x80),
    (0x8A, 0x8A, 0x8A),
    (0x94, 0x94, 0x94),
    (0x9E, 0x9E, 0x9E),
    (0xA8, 0xA8, 0xA8),
    (0xB2, 0xB2, 0xB2),
    (0xBC, 0xBC, 0xBC),
    (0xC6, 0xC6, 0xC6),
    (0xD0, 0xD0, 0xD0),
    (0xDA, 0xDA, 0xDA),
    (0xE4, 0xE4, 0xE4),
    (0xEE, 0xEE, 0xEE),
]


def _euclid_distance(rgb_x, rgb_y):
    # step 1: RGB => YUV
    # [ 0.299,  0.587,  0.114]   [r]
    # [-0.147, -0.289,  0.436] * [g]
    # [ 0.615, -0.515, -0.100]   [b]
    # step 2: YUVs euclid distance
    x_r, x_g, x_b = rgb_x
    y_r, y_g, y_b = rgb_y
    d_r, d_g, d_b = x_r - y_r, x_g - y_g, x_b - y_b
    d_y = 0.299 * d_r + 0.587 * d_g + 0.114 * d_b
    d_u = -0.147 * d_r - 0.289 * d_g + 0.436 * d_b
    d_v = 0.615 * d_r - 0.515 * d_g - 0.100 * d_b
    return d_y ** 2 + d_u ** 2 + d_v ** 2


@cache(key=lambda args: args[0])
def fitting_sgr(rgb):
    min_index, min_distance = 0, _euclid_distance(rgb, STANDARD_8BIT_RGB_HEX[0])

    for index, sgr_rgb in enumerate(STANDARD_8BIT_RGB_HEX[1:]):
        distance = _euclid_distance(sgr_rgb, rgb)
        if min_distance > distance:
            min_index, min_distance = index + 1, distance
    return SGR_8BIT_BG_COLOR_CODE % min_index + SGR_8BIT_FG_COLOR_CODE % 243
